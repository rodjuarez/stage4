main.py

import os
import jinja2
import webapp2
from collections import namedtuple
import sqlite3

db = sqlite3.connect(':memory:')
db.execute('create table links ' +
          '(contentn-title, content-description)')
for n in notes:
    db.execute('insert into notes values (?, ?)', l)

Notes = namedtuple('Notes',['content-title', 'content-description'])

notes = [Notes("Introduction to Networks", "<p>The Internet is called a <em>network</em>. In reality it is a series of networks connected around the world.</p>"),
       Notes("Networks", "<p>A <em>network</em> is a group of entities (people, organizations, computers, governments) that can communicate even though they are not all directly connected. Two people talkine not a network. Three entities where A connects with B and C, and B with A and C are not a network. But An entity A that connects to B, and B connects to A and C is a network. In other words, a network are at least three entities not directly connected, but that can connect through one of those entities relaying messages betwee the other two. The idea of a network is as old as 3000 years old. </p><p>Homer describes in the Illiad stories of events that happened 400 years before where Greeks communicated through smoke signals from island to island, relaying message of a possible invasion. That was an example of a network.</p>"),
       Notes("Elements of a Network", "<p>The basic elements of a network are:<ol><li>A way to encode a message (such as the smoke signals) and a way to interpret that encoded message.</li><li>A way to route, or send, that message (such as from island to island).</li><li>A set of rules of how to send the signals and who will get to use (read) them.</li></ol></p>"),
       Notes("Measuring Networks", "<p>There are two ways to measure a network: through its <em><b>latency</b></em>, and through its <em><b>bandwidth</b></em>.</p><p><em><b>Latency</b></em> is the time it takes for a message to to get from the source to the destination. It was measured in seconds, but now it is measured in milliseconds (ms), or a thousand of a second. In order to increase the speed of a network it is necessary to reduce its latency. This can be done by using fewer hops and or reducing the time needed to send a message.</p><p><em><b>Bandwitdh</b></em> is the rate at which information is sent, that is, the amount of information that can be transmitted per unit of time, regardless of when it starts. It used to be measured in bits per second but now in million of bits per second (Mbps) on the Internet, where a <em><b>bit</b></em> is the smallest unit of information.</p>"),
#       Notes("More on Bandwidth", "<p>The more bits we have, the more bits we can encode, and more data can be sent and received. In a question where we have to choose blue, or green, we only need one bit to answer it, but if we have four choices, say blue, green, red or yellow, it becomes more complicated. 1) Is it blue? = no, 2) Is it green? = no, 3) Is it red? = no, 4) Is it yellow? = yes. In order to reduce the number of bits needed to respond we have to develop more logical and simpler ways to encode our message to use less bits. A better approach would be: 1) Is it blue or green? = If yes, then 2) Is it blue? and we would know which one it is. Otherwise, if the answer was no, then 2) Is it red? Depending on the answer we would know if it is red or yellow, and we only would have used 2 bits. Everytime we add a bit we double the number of things. It becomes more exponential, thus 1 bit = 2, 2 bits = 4, 3 bits = 8, 4 bits = 16 things. This picture exemplifies it better.</p><p><img src="images/8bit_tree.png" width="486" height="336" alt="4 bit tree"></p>"),
       Notes("Protocols", "<p>We said that to have a netword one of the things needed are rules for transmitting the information, receiving it, and for those who are qualified to receive it. We call those rules a protocol. So a Protocol are a set of rules that people have agreed to, that dictates how 2 entities can talk to each other. A language is an example of a protocol. On the Web the protocol that is used is HTML, or Hyper Text Markcup Language.</p>"),
       Notes("Servers", "<p>A server is a computer program that provides services to other computer programs, users, and computers. The name server is also used to describe the computer where the server program has been installed. Once the server receives a request from a user's computer application, it seeks a way to fullfill that request. A <em><b>Web Server</b></em> will look for HTML pages that a user's browser might be requesting and return the request to the user.</p>"),
       Notes("URLs", "<p>URL, or Uniform Resource Locator identifies the location of a particular HTML page and with the help of the server displays it back on a Web page and display their location on the top part of the Web browser (http), the address bar. However, they are also used to transfer files (ftp), e-mail(mailto), database access (jdbc), etc. In &lt;em&gt;http:\\www.udacity.com/about&lt;/em&gt; the http portion is the protocol, the www.udacity.com represents the host, domain name, server, or ip address where it is stored, and about the path to an HTML page.</p>"),
       Notes("GET and POST", "<p>The HTML protocol has two ways, or <em><b>methods</b></em> to send forms data to a Web Server, this are the <em><b>GET</b></em> and <em><b>POST</b></em> methods.</p><p>While both methods for sending forms to a server work, the <em><b>GET</b></em> method displays the data it is sending on the URL making it a non secure way of transmitting data, however, reliable in sending data that is public. The GET method is basically used to send information and request of a permanent nature.</p><p>The <em><b>POST</b></em> method is a secure way to send information which is not displayed in the URl but is contained in the body itself of the form transmitted, making it a secure way to send it. It is also used to send larger quantities of data for that reason too; and it is used to send data that will make changes to the files in the server. Both methods are <em><b>query parameters.</b></em></p>"),
       Notes("Query Parameters", "<p>Both GET and POST methods are <em><b>query parameters.</b></em> They can be recognized after the domain name in the URl. For example, in http://www.sample.com/foo?=1q=one right after the question mark we encounter a container called q which is returning the value <em>one</em>. The question mark indicates that a query search has taken place, the container stores the value requested, and the one represents the value queried. All after the foo is called a <em><b>fragment.</b></em></p><p>Once we are at the desired server we can submit our GET request with the following syntax: GET /foo HTTP/1.1. Where GET (or POST) would be the method, /foo would be the document requested, and HTTP/1.1 the version. We don't have to specify the host again because we are already connected. When we have not made the connection we would have to write the full path, this is known as an <em>absolute path</em>, while our last one is a <em>relative path.</em> Again, GET is the most common method to get a document, while POST is used to send data to a server.</p><p>The differences between the <b>GET</b> and <b>POST</b> Methods are:<br><b>GET:</b><ol><li>The parameters are shown in the url</li><li>It is used to fetch documents</li><li>Maximum url length</li><li>ok to cache</li><li>Not designed to change the server</li><li>The information remains cached so it represents security problems</li></ol><b>POST:</b><ol><li>The paramenters are submitted in the body</li><li>greater security</li><li>It is used for updating data</li><li>No maximum length (however, severs might be configured to limit that)</li><li>Not ok to cache</li><li>Ok to change the server (mainly used for this)</li><li>Once a form is submitted the data is also deleted from the browser</li></ol></p>"),
       Notes("User Agent Header", "<p>When a request is made the URL adds the user-agent that is making the request and the browser making the request. These are contained in a <em><b>header</b></em>. While the information sent is necessary for the fast and correct retrieval of user requests, spammers and hackers can write code that can slow down our requests or gain access to our files and data.</p><p>Different browsers respond differently to different headers, so it is importanat to add additional meta data to the requst. When a request has been made the server responds with a <em><b>status code.</b></em> The most frequent codes are:<ul><li>200 Ok - document found</li><li>302 Found - document found somewhere else</li><li>404 - document not found</li><li>500 - server error</li></ul>Typical header responses include:<ul><li>Status Code - 200 Ok</li><li>Date - Tue Jun 25 2015 04:33:33 EST</li><li>Server - Apache/2.2.3</li><li>Content Type - text/html (or jpg, etc)</li><li>Content Length - 1539 (this is not required</li></ul></p>"),
       Notes("Web Applications", "<p>There are two types of server response4s to HTTP requests: <em><b>Static</b></em> and <em><b>Dynamic</b></em>. <em><b>Static responses</b></em> correspond to pre written files stored in a server such as videos, images, text, etc. <em><b>Dynamic responsos</b></em> are responses made on the file by <em><b>Web Applications</b></em>.</p><p>A <em><b>Web Applications or Web App</b></em> is a program that runs on a Web Broswer created by a programming language that allows it to render content in response to the input from a user. An example can be a list of flights available on certain date, or a list of movie theaters that show certain movie in town. Web Apps live on servers and speak HTTP.</p>"),
       Notes("Web Forms or HTML Forms", "<p>Are a way to send information through a Web page, through a browser, to a server. The HTML language provides different attributes to help with this, such as buttons, text fields, drop downs, checkboxes. They are a great help because the less a user has to type, the less errors or bad data that will go to a server. Data does not necessarily be sent thorugh an HTML form though, it can also be sent directly typing in the url.</p>"), 
#       Notes("URL Encoding", "<p>When creating forms we add a parameter to which attach data. This is done by the HTML tag <em><b>input</b></em>, attribute <em><b>name</b></em>. in the example <em><b>input type=text name=q</b></em>, the <b>q</b> parameter is used to contain and transmit the values we desire to send to the server. So if we have a form that is asking for a first name input from a user, and the user typed the name <em>Rod</em>, in the url we would see something like this: <span class="code">http:\\sample.com\foo\?q=Rod</span>, where the parameter q contains the name of our user <em>Rod</em>. If a second user was typed in, the second would replace the first one. However, if we had two inputs with two different parameters, say parameter <em>q</em> and parameter <em>s</em>, the value of q=Rod and s=Sam, our url would show: ?q=Rods=Sam.</p>"), 
       Notes("Google App Engine", "<p>Google App Engine, also called GAE, is a cloud service that allows a developer to run one or more applications through their servers with complete scalability. That means that it does not matter how many users are using the applicaiton, the number of servers needed will increase with demand, running through different servers located in different places, without having to maintain those servers.</p><p>There are some main components to all applications running on GAE. Since we are using Python our code file in python of course, an HTML file, templates that use different libraries for their creation (we used jinja2), and a YAML file (a file that helps to combine and scale a combination of lits, hash tables, and data on cloud applications).</p>"), 
#       Notes("Modules Operator <b>%</b>", "<p>The Modules Operator <b>%</b> is an operator (just like <b>+</b>, <b>-</b>, <b>*</b>, or <b>/</b>) that every programming language uses. The Python language is no different.</p><p><b>%</b> takes a number and maps it to the range based on the remainder of that number. IN other words, it finds the remainder of the division of one number by other. Let us supose that we are looking for the modulus, or 14 <b>mod</b> 12, written as <b>14 % 12</b>. The result would be 12. If we think of a clock starting at point 0 and moving 14 spaces in a clockwise motion we would finish at the number 2.</p><p><img src="images/clock.png" width="223" height="226" alt="Modulus Clock"></p>"), 
       #Notes("Dictionaries", "<p>A dictionary in Python is another data structure similar to a list, but where a key word is followed by a value, so if you look the keyword you will obtain its definition or value or vice versa. While a string can only contain characters, and lists elements that can be a string or integers, dictionaries can also contain both but follow the structure previously mentioned of keyword and value in between curly brackets. The Syntax is <span class="code">{keyword: value}</span>.</p><p>A dictionary is also mutable <span class="code">i.e. d[k] = v</span>; and elements can be added to the dictionary. For example:<br><span class="code">friends = {'Lisa': female, 'Lee': female, 'Jason': male, 'Shawn': male}</span><br>This would be the dictionary friends. To add my dog Toby, I would write:<br><span class="code">friends['Toby'] = dog</span>. I am adding a friend and a new category. My new dictionary would be:<br><span class="code">friends = {'Lisa': female, 'Lee': female, 'Jason': male, 'Shawn': male, 'Toby': dog}</span>.</p><p>One thing to consider using dictionaries is that when printing them we do not get the keywords and values in the same order we wrote them in the dictionary, they can print out in any order. However, dictionaries are great to use because it becomes very difficult to keep track of large data structures in lists as they become inefficient. Dictionaries allow us to lookup a word and obtain its value, it lets us see the keywords used, or search by values, and keywords can be indexed for faster retrieval because the values are cached in memory for faster retrieval and less computing power usage. Dictionaries can contain othr dictionaries that can be nested inside. Python has a built in dictionary type called <em><b>dict.</b></em></p>"), 
       Notes("General Concepts", "<p>In order to work with Google App Engine you have to create an account and download the Google App Engine App software. Then you have to create a simple application that once uploaded to GAE you use to run any other application you create. Our Python program the imported webapp2 library.</p>"), 
#       Notes("Handlers", "<p>While WSGI applications routes requests to the correct handler, the handler itself processes the request data and generates a response. When a WSGIApplication receives a request, it creates an instance of the RequestHandler class associated with the URL path in the request. It then calls a method that corresponds with the HTTP action specified by the request, such as the get() method for a HTTP GET request. The method then processes the request and prepares a response, then returns. Finally, the application sends the response to the user making request.</p><p>So a <em><b>handler</b></em> acts as a filter, a gateway, or a guide if you will, that will take a request to the correct location where the file or code is, to produce the response desired. It has to be added to the Python code to know where to look for it, or an 404 error - <em>Not Found</em> will ensue.</p>"), 
#       Notes("Validation", "<p><em><b>Validation</b></em> means to verify. Because users tend to make mistakes in typing when filling out forms, or because some like to fill forms with garbage. developers, wanting to ensure the content of their databases must ensure that the information entered is not going to affect it. Validation then becomes necessary to manage bad data. There are different strategies that a developer can use, such as limiting the input that can be typed by selection boxes (buttons, dropdowns, checkboxes, etc), through code (checking the input and converting it to the proper format such as in abreviation, date formats, etc), and <em><b>escapting</b></em>. When an error is found it is good practice to:<ul><li>Render the form again</li><li>Preserve the right data so it does not have to be re-entered</li><li>Include an error message that will help the user identify it and correct it.</li><li>Once the correct validated data is entered let the user know</li><li>Once the user successfully entered and submitted the data redirect the page</li></ul><img src="images/communication.png" alt="web communication" width="488" height="248"></p>"), 
       Notes("HTML Escaping", "<p>The problem with HTML input into forms, like someone type the html format for bold in their name, is that it would change the restuls of our form because it would modify the html. <em><b>Escaping</b></em> transforms the following characters to avoid it and displaying our html page correctly.<ul><li>=> amperstandquot;</li><li>> => amperstandgt;</li><li>< => amperstandlt;</li><li>& => amperstand&;</li></ul>The problem with creating functions to validate and replace HTML tags typed into forms is that it is prone to mistakes. The best practice is to use pre done and tested methods for this. We used jinja2 escape pipe, or filter in our projects.</p>"), 
#       Notes("String Substitution", "<p>Python provides a simple way to substitute strings instead of using functions or through manual changes or repitition. An example of the syntax  is: <span class="code">Welcome %s to your page</span>. The <em><b>%s</b></em> function creates a variable that can be substituted with any string. For example, let us see the folloiwng function that exemplifies it perfectly. Given the string <em>string = %s is a wonderful thing</em>:</p><p><span class="code">def sub(s):<br>return string %s<br>print sub(love)</span><br><br>Would return the string <em>love is a wonderful thing</em>.</p><p><em><b>Multiple String Substitution</b></em> can also be accomplished. The syntax is <span class="code">text %s text %s % (variable1, variable2)</span>.</p><p>Dictionaries can also be used with string substitution. The syntax is: <span class="code">text %(name)s text % {"name": value}.</span> An example follows.<br><br><span class="code">string = %(name)s is my dog. He is a %(breed)s, but we named him %(name)s.</span><br><br><span class="code">def sub(breed, name):<br>...return string %{"breed": breed, "name": name}</span><br><br>If we have a dictionary with dog breeds and dog names we could substitute any keyword (breed) with its corresponding value (name).</p>"), 
       Notes("Templates", "<p>In order to avoid repetitive work and increased errors, the best practice is to use templates. We can use Python functions to create HRML templates, and through the poser of string substitution we can fill out those forms with our variable content to fill them up. However, we encounter a series of problems:<ul><li>They are a pain to change</li><li>We do not get any syntax highlights</li><li>Our code is ugly</li><li>It is error prone</li></ul>Our solution is to use <em><b>templates</b></em> for a library.</p>"), 
#       Notes("Jinja2", "<p><a href="http://jinja.pocoo.org/" target="_new">Jinja2</a> is one of the many template libraries. Jinja 2 is a full featured template engine for Python that is easy to use and incorporate. The YAML file must be modified, incorporating a section:<br><span class="code">libraries:<br>--name: Jinja2<br>version: latest</span><br>Then we modify our python file by importing the library <span class="code">import jinja2</span>, and we initialize the jinja environment.<br><span class="code">template_dir=os.path.join(os.pathdirname(__file__), 'templates')<br>jinja_env=jinja2.Environment(loader=jinja2.FileSystemLoader(template_dir))</span><br><br>The <em>os.path</em> indicates the location of the directory and of the templates ((__file__) where the directory is). The second line creates the Jinja environment and loads it.</p><p>This is the process flow between servers and browser:: <img src="images/process.png" width="487" height="273" alt="process flow"></p><p>This is the Jinja2 process: <img src="images/jinjaprocess.png" alt="jinja process" width="488" height="322"></p>"), 
       Notes("The <em><b>*a</b></em> and the <em><b>**kw</b></em> Arguments", "<p>The <em><b>a</b></em> and <em><b>kw</b> arguments serve to pass lists, dictionaries, names, and/or variables parameters  <em><b>a</b></em> arguments pass one argument at th e time to get all the parameters looked for. <em><b>kw</b></em> arguments serve to get a list of all parameters by order.</p>"), 
#       Notes("Variable Substitution in Jinja2", "<p>The syntax to substitute code in Jinja2 is: <span class="code">{{variable}}</span>. In Jinja, if you do not define the variable it will not be included, so in <span class="code">Hello, {{name}}!!</span>, if we do not define the variable <em>name</em>, the result will only be <span class="code">Hello,!!</span>. Variables are defined in the Python file, which is passed through the <em><b>*a</b></em> and/or <em><b>**kw</b></em> parameters.</p><p>A simple example of variable substitution in jinja is:<br><br><span class="code">{{Chef1}} defeated {{Chef2}} in the challenge.</span> We could substitue variables <em>Chef1</em> and <em>Chef2</em> with any two element tuple, or dictionary.</p>"), 
#       Notes("<em><b>If</b></em> Loop Syntax", "<p>The general <b>if statement syntax in jinja2</b> is:<br><br><span class="code">{% statement %}<br>output<br>{% end statement %}</span><br><br>So for example:<br><br><span class="code">{% if name == "Rod" %}<br>Hello, Rod!<br>{% else %}<br>Who are you?<br>{% endif %}</span></p>"), 
#       Notes("The <em><b>for</b></em> Loop Jinja Syntax", "<p>The <em><b>for</b></em> loop syntax in jinja is just like the <em>if</em> loop syntax.<br><br><span class="code"> {% for statement %}<br>body<br>{% endfor %}</span></p>"), 
       Notes("Templates Good Practices", "<p>It is a good practice to keep our Python code in a Python file with minimum HTML in it; a <b>base</b> template that we can resuse and anchors all the other templates; and all our other templates, all in different files.</p>"), 
       #Notes("Escaping Templates with Jinja2", "<p>As previously stated it is much simplet to use code that has been previously tested and tried than writing our own code because it is easier, faster and less error prone. Jinja2 provides us with a pipe or filter for this. The syntax is:<br><br><span class="code">{% for statement %}<br>{{item|escape}}<br>{% endfor %}</span>.<br>The <b>|</b> is the pipe or filter.<br><br>However, even a simplier solution is to add an <em><b>autoescape = True</b></em> option to our jinja environment in our Python code becauase then we don't have to be typing the jinja <em>for</em> or <em>if</em> code. And it has the advantage that you won't make errors or forget.</p>"), 
       Notes("The Output <b>{{ content }}</b> Command", "<p>In Jinja2 two opening and two closing curvy brackets (<em><b>{{ content }}</b></em>)indicate that the content in between will be the output.</p>"), 
       #Notes("Template Inheritance", "<p>By using a base template we ensure that the rest of our templates will have the same look. Once a base template is defined we can later plug in HTML information. This translates into a consistent header and footer throughout our application.</p><p>To complete the process Jinja2 allows us to substitute blocks of content wihch which we can customize each page from the master or base template, as each one will have a different content. The code inside the body tags of our HTML code is:<br><br><span class="code">{% block content %}<br>{% endblock %}</span></p><P>We will use this jinja code in each of our pages. To complete our template inheritance we will add on top of the template: <span class="code">{% extends base.html %}</span> where base.html is our main template. This lets the form know that it will use the base.html template to inherite from it.</P>"), 
       Notes("Final Word on Templates", "Templates:<ol><li>Separate different types of code</li><li>Makes our code more readable</li><li>Provides more secure websites</li><li>Provides HTML that is easier to modify instead of modifying strings through Python code</li><li>They result in a powerful way to build our applicaitons and rendering them</li></ol></p>"), 
       Notes("Database Definition", "<p>A <em><b>database</b></em> is a program that stores and retrieves small or large amouts of data. large databases reside in one or several servers, and can be accessed by one or many users at t he same time. A <b>database server</b> refers to a server that has been dedicated exclusively to a database use. There are many types of databases, and not all of them are the same. Some have stronger and weaker aspects to them. However, all of them are made of hash tables and contain an <b>ID</b>. The hash tables contain rows and columns. Databases were created because querying data by hand is error prone, tedious, and slow.</p><p>In other words, a relational database is a collection of data items stored in cells in organized in tables, which data can be accessed or reassembled in many different ways without having to reorganize the database tables.  It is easy to create access and extend; and new columns and rows can be added to the original database without having to modify it. Each row contains a unique instance of data for each category defined by the columns, and relations among these cells (where a column and a row intersect) form relations.</p>"), 
       Notes("Types of Databases", "<p>There are two types of databases: 1)Relational and 2) Non relational databases. <em><b>SQL</b></em>, or <em><b>Structured Query Language</b></em>, <em><b>MySQL</b></em>, <em><b>Sqlite</b></em>, and <em><b>Oracle</b></em> are examples of databases that use relational databases, being SQL the most common one. Companies that use them include Reddit, Facebook, etc.</p><p>A non-relational database (or <b>NoSQL</b>), is a database that follows a different table/key model that relational databases follow. They require data manipulation techniques and processes to process big data. Companies such as Google, Yahoo, and Amazon use them. Because they introduce many new applications every day with millions and millions of users, they would not be able to handle large traffic spikes with regular relational databases processes which are not the best for Web scale data in a non-relational way, while a non-relational database strength is scalability. Persistence is an important element of these databases. To enable fast throughput of vast amounts of data the best option for performance is "in memory," rather than reading and writing from disks which they attain by indexing.</p><p>Some of these databases are Google App Engine Database (Datastore), Dynamo (by Amazon), Mongo, Couch. There really is no better database, but it should be chosen to solve particular problems.</p>"), 
#       Notes("SQL", "<p><em><b>SQL</b></em> is a language developed for expressing queries into the database to obtain data. It was invented by E. F. Codd at IBM in 1970 way before any Web application existed or the Internet was developed.</p><p>The syntax for an SQL query is:<br><br><span class="code">select * from table_name where constrain</span>. Where <em><b>select *</b></em> is saying to retrieve data from all the columns that can be a list, a dictionary, an url, or a title. The <em><b>from table_name</b></em> where the table name can be multiple tables, form what is called the <em><b>clause</b></em> section. Finally, the <em><b>where</b></em> part is called the <em><b>where clause</b></em> section, followed by the constraints that constrains our query. For example, we could constrain the query to <em>where id=7</em>. Constrains are not obligatory.</p><p>A more advanced constrain definition could be built through the use of multiple constrains joined or ordered by clause. Example of multiple constrains:<br><br><span class="code">select * from links where id=5 and age > 21 or id=10 and age == 25</span>.</p>"), 
#       Notes("New Vocabulary", "<p><b>Tuple:</b> A tuple is an ordered set of values separated by a comma used as a data type. They serve to passing a string of parameters and represent a set of values that do not change, which is their difference with list.</p><p><b>Lambda:</b> A lambda function is a function that takes any number of arguments and returns the value of a single expression. In other words, it abbreviates the syntax elliminating parenthesis. This can be appreciated in the following code:<br><br><span class="code">def f(x):<br>...return x*2<br>print f(3)<br>=> 6</span></p><p>Using lambda:<br><br><span class="code">g = lambda x: x*2<br>print g(3)<br>=> 6</span><br><br>Or even:<br><br><span class="code">(lambda x: x*2)(3)<br>=> 6</span></p><p><b>The <em>Sort()</em> Function:</b> Python has a built in sort funtion that builds a new sorted list out of an unsorted one. Example:<br><br><span class="code">a = [5, 2, 3, 1, 4]<br>a.sort()<br>print a<br>=> [1, 2, 3, 4, 5]</span></p>"), 
#       Notes("Python and SQL", "<p>Python supports SQL commands. Here is an examle of the code we would need to build a database in Python code.<br><br><span class="code">db=sqlite3.connect(':memory:')<br>db.execute('create table links' +<br>'(comuns defined here)')</span></p><p>The Python function syntax would be something like this:<br><br><span class="code">def query():<br>...cursor = db.execute("select * from links")<br>...for link_tuple in cursor:</span><br><br>And what we would want it to do would follow.</p>"), 
       Notes("Indexes and Dictionary Indexing", "<p>The first way to obtain results in a query is by sequential scans where we go through our list, tuples, or dictionaries looking for data. While that is a good approach for small lists of things, such as links and their titles, as our list of things grows, or the query requires more sophisticated, faster searches, indexes become a must. The word index comes from two words: in dex, which means an ordered list with a reference of where they occur in the list. <em><b>Indexes</b></em> where created to speed up queries. By selecting one or more columns in a hash table, a section in memory is created for them (cached) so that scanning through them in memory rather than from a disk. By <em><b>indexing dictionaries</b></em> the speed of quering increases through mapping keywords to values.</p><p>Indeces do not have a maintenance cost by having to update them with the rest of the database.</p>"), 
       Notes("Look Up", "<p>Lookup in databases refers to the systematic electronic retrieval of the data stored in hash tables. As stated before, indexing is used for fast lookup of keywords that will lead to the retrieval of values mapped to the keywords. Through this mappying we do not have to remember all the keywords in the dictionary, but we can <em><b>lookup</b></em> the list of keywords, or retrieve values with certain criteria, making it much easier to find the data and retrieve it. We can also link to keywords to obtain the combination of values or create custom new tables. We can also combine different tables by linking connecting keywords, or different ones.</p>"), 
       Notes("Indices for Sorting", "<p>One of the characteristics of hash tables is that they are not sorted as they are just a series of keywords mapped to values, that is, an array with fields insde of them. Even if it was written in some sort of sorted way, as the database is modified (adding or deleting values to it) its initial sorting would be lost because new values could be placed in any position of the table.</p><p>So, to create a sorted index we use a <em><b>tree</b></em> which is a different kind of mapping. A <em><b>tree</b></em> is a basic data structure, like a hash tag, but that is sorted, unlike hash tags. However there is a trade off.</p><p><em><b>Hash tags</b></em> are done by a constant time per field. Lookups are not dependent on the number of fields, so queries are faster. However, they are not sorted.</p><p><em><b>Trees</b></em> are slower because their lookups are dependent on the number of fields that exist. However, they have the advantage of being sorted.</p><p>Depending on the size of the table one has to decide if using one or the other is more appropriate to your needs. There are databases that allow you to decide, but there are others that do not. However, most relational databases preserve sorting.</p>"), 
       Notes("ACID", "<p>The acronym <em><b>ACID (Atomicity, Consistency, Isolation, Durability)</b></em> in relational databases explains the properties that guarantee that database transactions are processed in a reliable manner, which ensure that databases integrity is kept and updated across different servers and users, like in the case of bank transfers, database updates, etc. Jim Gray defined these automatic properties in 1970, although the terms was coined by Adreas Teuter and Theo Harder in 1983.</p><p><em><b>A</b></em>tomicity - states that all parts of a transaction secceed or fail together. A <b>transaction</b> is a group of statements, perhaps updating 2 tables at once, or multiple rows together at once in one cohesive unit in the database, otherwise all transactions would roll back to the previous state.</p><p><em><b>C</b></em>onsistency - a database must always be consistent, that is, it will remain consistent in its relationship between its different parts. So, if you update one part it will update the others to reflect that change.</p><p><em><b>I</b></em>solation - no transaction can interfere with any other. So if two users are wanting to change a value, the first transaction will have to be finished first, before the second one could proceed.</p><p><em><b>D</b></em>urability - once the transaction is committed it will not be lost even if the server would crash or be unplugged. It is like saving a file in your computer. Once it is saved it would not be lost if the lights went off.</p><p>Unfortunately not all databases have all these characteristics, but a trade off exists among these properties, so the needs would have to dictate which one would be the best to use.</p>"), 
       Notes("Google App Engine Datastore", "<p>Google App Engine uses a NoSQL approach to its database creation, using a <em><b>BASE</b></em> aproach, acronym for <em><b>(Basic Availability, Soft State, Eventual Consistency)</b></em>. The approach is simple, instead of guaranteeing the consistency of the database, it settles for an <em>eventual</em> consistency such as in accounting is known as <em>closing the books</em>.</p><p><em><b>Datastore</b></em> calls columns <em>tables</em> and columns are called <em>entities</em>. the tables are fixed, but the entities are not fixed. That means that you can have as many entities (columns) as you would like. Entities of the same kind do not have to have the same columns, making development easier because you can change a column while developing.</p><p>All entities have an <em>id</em> which can be automatically assigned or selected by the developer using strings or integers. The syntax is similar to that of SQL.</p>"), 
       Notes("Planning a Database", "<p>To plan a successful database you have to consider to aspects: The data part, and the structure it will have.</p><p><b>Data:</b><ol><li>Will users be able to make changes?</li><li>What type of changes will they make></li><li>What type of credential, if any, users will have to access the database?</li></ol><b>Structure:</b><ol><li>What type of data will the database have?</li><li>What will be required?</li><li>What will be optional?</li><li>What data will be indexed?</li><li>What type of database will be used?</li></ol></p>")
       ]


template_dir = os.path.join(os.path.dirname(__file__), 'templates') #concatenates the dir with the templates. Look in here for templates
jinja_env = jinja2.Environment(loader = jinja2.FileSystemLoader(template_dir),
                                autoescape = True) #creates the jinja env and initializes

class Handler(webapp2.RequestHandler):
    def write(self, *a, **kw):
        self.response.out.write(*a, **kw)

    def render_str(self, template, **params): #takes file name (templates and params)
    	t = jinja_env.get_template(template) #loads the file and gives it a name
    	return t.render(params) #passing the params

    def render(self, template, **kw):
    	self.write(self.render_str(template, **kw)) #wraps it and reutrns it

class MainPage(Handler):
    def get(self):
    	items = self.request.get_all("comment") #get all the parameters
    	self.render("comments.html", items = items)
    	self.render("comments_list.html")

#class NotesHandler(Handler):
#    def get(self):
#        self.render("notes.html")

app = webapp2.WSGIApplication([('/', MainPage),
				('notes', NotesHandler),
                            ],
                            debug=True)
#app = webapp2.WSGIApplication ([('/', MainPage),],debug=True)

notes.html template

{% extends "base.html" %} 

{%block content%} 


<form>
    {% for concept in concepts %}
    <div class="concept">
        <div class="concept-title">
            {{ concept[0] }}
        </div>
        <div class="concept-description">
            {{ concept[1] }}
        </div>
    </div>
    {% endfor %}
</form>

{% endblock %} #close the block

